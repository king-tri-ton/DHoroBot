# coding: utf8
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from config import *
from parser import *
from db import *
import telebot

bot = telebot.TeleBot(TOKEN)

zodiac_signs = {
    '‚ôàÔ∏è –û–≤–µ–Ω': 'aries',
    '‚ôâ –¢–µ–ª–µ—Ü': 'taurus',
    '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã': 'gemini',
    '‚ôãÔ∏è –†–∞–∫': 'cancer',
    '‚ôå –õ–µ–≤': 'leo',
    '‚ôç –î–µ–≤–∞': 'virgo',
    '‚ôé –í–µ—Å—ã': 'libra',
    '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio',
    '‚ôê –°—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
    '‚ôë –ö–æ–∑–µ—Ä–æ–≥': 'capricorn',
    '‚ôí –í–æ–¥–æ–ª–µ–π': 'aquarius',
    '‚ôì –†—ã–±—ã': 'pisces'
}

period_map = {
    '–≤—á–µ—Ä–∞': 'yesterday',
    '—Å–µ–≥–æ–¥–Ω—è': 'today',
    '–∑–∞–≤—Ç—Ä–∞': 'tomorrow',
    '–Ω–µ–¥–µ–ª—è': 'week',
    '–º–µ—Å—è—Ü': 'month',
    '–≥–æ–¥': 'year'
}

def get_zodiac_from_text(text):
    found_sign = None
    for sign_full, sign_eng in zodiac_signs.items():
        sign_name = sign_full.split()[-1].lower()
        if sign_name in text:
            found_sign = sign_eng
            break
    return found_sign

@bot.message_handler(commands=['start'])
def send_welcome(message):
    args = message.text.split()
    zodiac_arg = args[1] if len(args) > 1 else None

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    col1, col2 = [], []
    for sign in zodiac_signs:
        if len(col1) < 6:
            col1.append(sign)
        else:
            col2.append(sign)
    markup.add(*col1)
    markup.add(*col2)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    wlcmmsg = f'<b>üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}</b>\n\n'

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ—Å–∫–æ–ø
    if zodiac_arg and zodiac_arg in zodiac_signs.values():
        wlcmmsg += getHoro(zodiac_arg, 'today')
    else:
        # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫
        wlcmmsg += getHoroTodayAll() + '\n\n‚öõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞'

    bot.send_message(
        message.from_user.id,
        text=wlcmmsg,
        reply_markup=markup,
        parse_mode="html",
        disable_web_page_preview=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    tgidregister(message.from_user.id)


@bot.message_handler(commands=['chat'])
def send_chat(message):
    if message.chat.id == ADMIN and len(message.text.split()) > 1:
        new_link = message.text.split(' ', 1)[1].strip()
        set_chat_link(new_link)
        bot.send_message(ADMIN, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        chat_link = get_chat_link()
        if chat_link:
            chatmsg = f'<b> [–ß–∞—Ç] ‚öõÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –°–µ–≥–æ–¥–Ω—è</b>\n\nüëâ <a href="{chat_link}">–ù–∞–∂–º–∏ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</a>'
        else:
            chatmsg = "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω–∞."
        bot.send_message(message.chat.id, text=chatmsg, parse_mode="html", disable_web_page_preview=True)

@bot.message_handler(commands=['stat'])
def send_stat(message):
    if message.chat.id == ADMIN:
        stat = f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</b>\n\nüîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {countusers()}\nüë• –ì—Ä—É–ø–ø/—á–∞—Ç–æ–≤/—Ñ–æ—Ä—É–º–æ–≤: {countgroups()}'
        bot.send_message(ADMIN, text=stat, parse_mode="html")

@bot.my_chat_member_handler()
def handle_chat_join(event):
    chat = event.chat
    new_status = event.new_chat_member.status

    if new_status in ['member', 'administrator']:
        register_group(chat.id, chat.type)

@bot.message_handler(content_types=['text'])
def process_step(message):
    text = message.text.lower().strip()

    if message.chat.type in ['group', 'supergroup']:
        bot_username = bot.get_me().username.lower()

        if f"@{bot_username}" in text:
            text = text.replace(f"@{bot_username}", "").strip()
            if not text:
                bot.reply_to(message, "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø, –Ω–∞–ø–∏—à–∏:\n\n@DHoroBot –†–∞–∫ —Å–µ–≥–æ–¥–Ω—è\n@DHoroBot –õ–µ–≤ –∑–∞–≤—Ç—Ä–∞\n\n–ü–µ—Ä–∏–æ–¥ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç '—Å–µ–≥–æ–¥–Ω—è'.")
                return
            
            found_sign = get_zodiac_from_text(text)

            if found_sign:
                found_period = '—Å–µ–≥–æ–¥–Ω—è'
                for period in period_map:
                    if period in text:
                        found_period = period
                        break

                result = getHoro(found_sign, period_map[found_period])
                bot.reply_to(message, result, parse_mode="html", disable_web_page_preview=True)
            else:
                bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä:\n@DHoroBot –†–∞–∫ —Å–µ–≥–æ–¥–Ω—è")
            return

    sign = zodiac_signs.get(message.text)
    if sign:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*[InlineKeyboardButton(text=period, callback_data=f'{sign}|{period}') for period in period_map])
        bot.send_message(message.from_user.id, f'–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø {message.text} –Ω–∞:', reply_markup=keyboard, parse_mode="html")

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    el = call.data.split("|")
    bot.send_message(call.message.chat.id, getHoro(el[0], period_map[el[1]]), parse_mode="html", disable_web_page_preview=True)

bot.infinity_polling(interval=0)
